package EXAMEN2023;

import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class BD {
    private static BD Miinstancia = null;
    private static boolean permitir_instancianueva = true;
    private String Cadena_conexion;
    private String usuario;
    private String pass;
    private Connection conn;
    private Statement stmt;

    private BD() throws Exception {
        if (!permitir_instancianueva)
            throw new Exception("No se puede crear otro objeto de la clase");
        permitir_instancianueva = false;
    }

    public static BD getInstance() throws Exception {
        if (Miinstancia == null) {
            Miinstancia = new BD();
        }
        return Miinstancia;
    }

    public void setCadena_conexion(String cadena_conexion) {
        this.Cadena_conexion = cadena_conexion;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public void setPass(String pass) {
        this.pass = pass;
    }

    public ResultSet consultaBD(String consulta) {
        ResultSet rset = null;
        try {
            this.conn = DriverManager.getConnection(this.Cadena_conexion, this.usuario, this.pass);
            this.stmt = conn.createStatement();
            rset = stmt.executeQuery(consulta);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rset;
    }

    public void executeUpdate(String sql) {
        try {
            if (this.conn == null || this.conn.isClosed()) {
                this.conn = DriverManager.getConnection(this.Cadena_conexion, this.usuario, this.pass);
            }
            this.stmt = conn.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void cargarParametrosconexion() throws ParseException, org.json.simple.parser.ParseException {
        JSONParser parser = new JSONParser();
        try {
            JSONObject json = (JSONObject) parser.parse(new FileReader("output.json"));
            String driver = (String) json.get("DRIVER");
            String servidor = (String) json.get("SERVIDOR");
            String puerto = (String) json.get("PUERTO");
            String sid = (String) json.get("SID");
            String usuario = (String) json.get("USUARIO");
            String clave = (String) json.get("CLAVE");

            this.setCadena_conexion(driver + "://" + servidor + ":" + puerto + "/" + sid);
            this.setUsuario(usuario);
            this.setPass(clave);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        try {
            BD bd = BD.getInstance();
            bd.cargarParametrosconexion();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

